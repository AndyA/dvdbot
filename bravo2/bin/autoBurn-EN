#!/bin/sh
# roboticke paleni a tisk ze slozky na Bravo II
# robot for burn and print from folder to Bravo II
# version 0.1.2 David Fabel (c) 2007

. /srv/bravo2/bin/bravo2function-EN.sh

. /srv/bravo2/bin/scriptFunction-EN

. /srv/bravo2/bravoSourceMedia

LOGLEVEL="2"

bravo {R}

startLog

bravoWorkDir="/srv/bravo2/bravoRobot"
bravoTmpDir="/srv/bravo2/bravoTmp"

lastSource=""
leftSource=$(echo "$leftSource" |
             tr "[:upper:]" "[:lower:]")
rightSource=$(echo "$rightSource" |
              tr "[:upper:]" "[:lower:]")

function detectFormat()
 {
  logMsg 5 "starting detectFormat"
  size=$(wc -c "$1" | sed "s| .*||")
  format=$(echo -e "$1" |
           sed "s|.*\.||" |
           tr "[:upper:]" "[:lower:]" |
           grep "dvd" |
           sed "s|.*dvd.*|dvd|")
  logMsg 3 "File '$1' have size: '$size' and format: '$format'"
  if [ "$size" -gt "750000000" ] || [ "$format" = "dvd" ]; then
    logMsg 2 "Detected format: '$format'"
    echo "dvd"
  else
    logMsg 2 "Set format: 'cd'"
    echo "cd"
  fi
  logMsg 5 "ended detectFormat"
 }

function detectCopies()
 {
  logMsg 5 "starting detectCopies"
  copies=$(echo -e "$1" |
           sed "s|.*\.||" |
           grep -i "[0-9]\+x" |
	   sed -e "s|\([0-9]\+\)[xX].*|~\1|" \
	       -e "s|.*~||" )
  if [ -z "$copies" ]; then
    copies=1
  fi
  logMsg 3 "File '$1' have copies:'$copies'"
  echo $copies
  logMsg 5 "ended detectCopies"
 }

function detectTest()
 {
  logMsg 5 "starting detectTest"
  test=$(echo -e "$1" |
           sed "s|.*\.||" |
           grep -i "_t$")
  if [ -n "$test" ]; then
    test=true
  else
    test=false
  fi
  logMsg 3 "File '$1' have set testing: '$test'"
  echo $test
  logMsg 5 "ended detectTest"
 }

function getSourceMedia()
 {
  logMsg 5 "starting getSourceMedia"
  format=$(detectFormat "$1")
  if [ "$format" = "$leftSource" ] && [ "$format" = "$rightSource" ]; then
    logMsg 2 "File '$1' have format: '$format', then is in both sources"
    if [ "$lastSource" = "{°~~}" ]; then
      logMsg 4 "Get from right source '{~~°}'"
      echo {~~°}
    else
      logMsg 4 "Get from left source '{°~~}'"
      echo {°~~}
    fi
  else
    if [ "$format" = "$leftSource" ]; then
      logMsg 2 "File '$1' have format: '$format', then is in left source"
      echo {°~~}
    else
      if [ "$format" = "$rightSource" ]; then
        logMsg 2 "File '$1' have format: '$format', then is in right source"
        echo {~~°}
      else
        logMsg 1 "File '$1' have format: '$format', NOT in sources (left: '$leftSource', right: '$rightSource')"
      fi
    fi
  fi
  logMsg 5 "ended getSourceMedia"
 }

function decrementCopyCounter()
 {
  logMsg 5 "starting decrementCopyCounter"
  copies=$(detectCopies "$1")
  logMsg 2 "File '$1' have set copies: '$copies'"
  if [ "$copies" -eq 1 ]; then
    logMsg 2 "File '$1' have only 1 copy, delete it"
    rm -f "$1"
  else
    newCopies=$(( $copies - 1 ))
    newName=$(echo "$1" |
              sed "s|\(.*\.\)\(.*\)${copies}x|\1\2${newCopies}x|")
    logMsg 2 "File '$1' renamed to  '$newName'"
    mv "$1" "$newName"
  fi
  logMsg 5 "ended decrementCopyCounter"
 }

function getFileName()
 {
  logMsg 5 "starting getFileName"
  name=$(cd "$bravoWorkDir"
         ls -1 "$1"* 2>/dev/null |
         grep "^$1\.$2")
  echo -e "$name"
  logMsg 5 "ended getFileName"
 }

function setDriveSource()
 {
  logMsg 5 "starting setDriveSource"
  . "$sourceMedia"
  leftSource=$(echo "$leftSource" |
               tr "[:upper:]" "[:lower:]")
  rightSource=$(echo "$rightSource" |
                tr "[:upper:]" "[:lower:]")
  echo "#media actualy inserted in left, burn drive and right source

leftSource=\"$leftSource\"
burnDrive=\""$1"\"
rightSource=\"$rightSource\"
" > "$sourceMedia"
  logMsg 5 "ended setDriveSource"
 }
 
function selectJob()
 {
  logMsg 5 "starting selectJob"
  . /srv/bravo2/bravoSourceMedia
  leftSource=$(echo "$leftSource" |
               tr "[:upper:]" "[:lower:]")
  rightSource=$(echo "$rightSource" |
                tr "[:upper:]" "[:lower:]")
  
  logMsg 4 "leftSource: '$leftSource', type: '$1', driveSource: '$2'"
  if [ -n "$leftSource" ]; then
    leftEntry=$(ls -1r 2>/dev/null |
                grep -i "\.$1\." |
                grep -v "^$2\." |
                sed "s|.*\.||" |
                tr "[:upper:]" "[:lower:]" |
                grep "$leftSource" |
                sed "s|\..*||" |
                uniq |
                head -n1)
  fi

  logMsg 4 "rightSource: '$rightSource', type: '$1', driveSource: '$2'"
  if [ -n "$rightSource" ]; then
    rightEntry=$(ls -1r 2>/dev/null |
                 grep -i "\.$1\." |
                 grep -v "^$2\." |
                 sed "s|.*\.||" |
                 tr "[:upper:]" "[:lower:]" |
                 grep "$rightSource" |
                 sed "s|\..*||" |
                 uniq |
                 head -n1)
  fi

  logMsg 4 "leftEntry: '$leftEntry', rightEntry: '$rightEntry'"
  # detected jobs for both sources
  if [ -n "$leftEntry" ] && [ -n "$rightEntry" ]; then
    entry=$(ls -1r 2>/dev/null |
            grep -i "\.$1\." |
            grep -v "^$2\." |
            sed "s|\..*||" |
            uniq |
            head -n1)
    logMsg 2 "Exist jobs for both sources, get eldest job in queue: '$entry'"
  else
    if [ -n "$leftEntry" ]; then
      entry=$(ls -1r 2>/dev/null |
              grep -i "\.$1\." |
              grep -v "^$2\." |
              grep "$leftEntry" |
              sed "s|\..*||" |
              uniq |
              head -n1)
      logMsg 2 "Exist jobs for left source, get eldest job in queue: '$entry'"
    else
      if [ -n "$rightEntry" ]; then
        entry=$(ls -1r 2>/dev/null |
                grep -i "\.$1\." |
                grep -v "^$2\." |
                grep "$rightEntry" |
                sed "s|\..*||" |
                uniq |
                head -n1)
        logMsg 2 "Exist jobs for right source, get eldest job in queue: '$entry'"
      else
        entry=""
        logMsg 3 "No job for this source ($leftSource/$rightSource)"
      fi
    fi
  fi

  isoName=$(getFileName "$entry" "iso")
  logMsg 3 "Get job: '$entry' ('$1', '$2', '$isoName')"
  if [ "$1" = "pnm" ] && [ -n "$isoName" ]; then
    entry=""
  fi
  logMsg 3 "Get job aftrer elimination ISO jobs: '$entry'"

  echo -e "$entry"
  logMsg 5 "ended selectJob"
 }
 
check eject
#check scsitape
check sed
check tr
check grep
check sleep
check cdrecord
check mkisofs
check pngtopnm
check jpgtopnm
#check veci kolem brava

bravo {R}

cd "$bravoWorkDir"
#getData
#getDataBurn
statusPrinter=$(getStatus printer)

logMsg 2 "Clearing printer: '$statusPrinter'"
if [ "$statusPrinter" = "O" ]; then
  logMsg 2 "Close printer"
  bravo {=c}
fi
if [ "$statusPrinter" = "D" ]; then
  logMsg 2 "Remove unknown media from printer"
  bravo {=_}
fi
statusBurn=$(getStatus burn)
setStatusBurn "?"
logMsg 2 "Clearing burn drive: '$statusBurn'"
if [ "$statusBurn" = "O" ]; then
  logMsg 2 "Close burn drive"
  bravo {-c}
fi
if [ "$statusBurn" = "D" ]; then
  logMsg 2 "Remove unknown media from burn drive"
  bravo {-e} {~-~} {^} {-c} {-_}
fi
setDriveSource ""

while true; do
  cd "$bravoWorkDir"
  iso=""
  picture=""

  . /srv/bravo2/bravoSourceMedia
  leftSource=$(echo "$leftSource" |
               tr "[:upper:]" "[:lower:]")
  rightSource=$(echo "$rightSource" |
                tr "[:upper:]" "[:lower:]")

  statusBurn=$(getStatus burn)
  statusPrinter=$(getStatus printer)
  if [ -n "$burnDrive" ] && [ "$statusBurn" != "B" ]; then
    logMsg 3 "Get actualy status burDrive (older is '$status')"
    statusBurn=$(getStatus burn)
  fi
  if [ "$statusBurn" = "E" ]; then
    error=$(getBurnError)
    logMsg 1 "Job: '$burnDrive' have error: '$error'"
    bravo {-e} {~-~} {^} {-c} {-_}
    setStatusBurn "?"
    statusBurn=$(getStatus burn)
  fi
  if [ "$statusBurn" = "D" ]; then
    logMsg 2 "Burned job: '$burnDrive'"
    iso=$(getFileName "$burnDrive" "iso")
    decrementCopyCounter "$iso"
    setDriveSource ""
    iso=""
    picture=$(getFileName "$burnDrive" "pnm")
    if [ -z "$picture" ]; then
      logMsg 3 "Burned job have not label"
      bravo {-e} {~-~} {^} {-c} {-_}
    else
      logMsg 3 "Burned job have label"
      bravo {-e} {-=} {-c} {=c}
    fi
    . /srv/bravo2/bravoSourceMedia
    leftSource=$(echo "$leftSource" |
                 tr "[:upper:]" "[:lower:]")
    rightSource=$(echo "$rightSource" |
                  tr "[:upper:]" "[:lower:]")
    statusBurn=$(getStatus burn)
    statusPrinter=$(getStatus printer)
  fi

  logMsg 3 "State1 Iso: '$iso', picture: '$picture'"

  if [ "$statusBurn" = "I" ]; then
    logMsg 3 "burn drive is empty"
    iso=""
  fi

  logMsg 3 "State2 Iso: '$iso', picture: '$picture'"

  if [ "$statusBurn" = "B" ]; then
    logMsg 1 "Now burned: '$burnDrive'"
    iso=$(getFileName "$burnDrive" "iso")
    picture=""
  fi

  logMsg 3 "State3 Iso: '$iso', picture: '$picture', burn drive: '$burnDrive'"

  if [ -z "$iso" ]; then
    logMsg 3 "Find new job for burning"
    entry=$(selectJob "iso" "^$")
    logMsg 4 "entry: '$entry'"
    if [ -n "$entry" ]; then
      iso=$(getFileName "$entry" "iso")
      logMsg 4 "iso: '$iso'"
    else
      iso=""
    fi
  fi

  logMsg 3 "State4 Iso: '$iso', picture: '$picture', status burn: '$statusBurn'"

  if [ -n "$iso" ] && [ "$statusBurn" != "B" ]; then
    lastSource=$(getSourceMedia "$iso")
    logMsg 2 "Starting burn job '$iso' from source '$lastSource'"
    if [ -n "$lastSource" ]; then
      bravo $lastSource {^} {~-~} {-e} {v} {-c}
      jobName=${iso%\.${iso#*\.}}
      setDriveSource "$jobName"
      . /srv/bravo2/bravoSourceMedia
      leftSource=$(echo "$leftSource" |
                   tr "[:upper:]" "[:lower:]")
      rightSource=$(echo "$rightSource" |
                    tr "[:upper:]" "[:lower:]")
      logMsg 2 "Set name '$jobName' in sourceMedia"
      if [ $(detectTest $iso) ]; then
        logMsg 2 "Burning and testing job '$iso' started"
        bravoBurn "$iso" verify
      else
        logMsg 2 "Burning job '$iso' started"
        bravoBurn "$iso"
      fi
    fi
  else
    logMsg 2 "No job for burning"
  fi

  logMsg 3 "State5 Iso: '$iso', picture: '$picture', burn drive: '$burnDrive'"

  if [ -z "$picture" ]; then
    logMsg 3 "Find new job for printing"
    entry=$(selectJob "pnm" "$burnDrive")
    if [ -n "$entry" ]; then
      picture="$(ls "$entry"*.pnm* 2>/dev/null |
                sed "s|.*/||")"
    else
      picture=""
    fi
  fi

  logMsg 3 "State6 entry: '$entry' Iso: '$iso', picture: '$picture', status burn: '$statusBurn', status printer: '$statusPrinter'"

  if [ -n "$picture" ] && [ "$statusPrinter" = "D" ]; then
    logMsg 2 "Starting print label '$picture' for now burned job"
    bravoPrint "$picture"
    decrementCopyCounter "$picture"
    picture=""
    sleep 5
    bravo {=e} {~=~} {^} {=c} {-_} 
  fi

  logMsg 3 "State7 Iso: '$iso', picture: '$picture', status printer: '$statusPrinter'"

  if [ -n "$picture" ] && [ "$statusPrinter" != "D" ]; then
    lastSource=$(getSourceMedia "$picture")
    logMsg 2 "Starting printing job '$picture' from source '$lastSource'"
    if [ -n "$lastSource" ]; then
      bravo $lastSource {^} {~=~} {=e} {v} {=c}
      bravoPrint "$picture"
      decrementCopyCounter "$picture"
      picture=""
      sleep 5
      sleep 1
      bravo {=e} {~=~} {^} {=c} {-_} 
    fi
  else
    logMsg 2 "No job for print"
    sleep 10
  fi
done

endLog
